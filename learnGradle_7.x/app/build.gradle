apply plugin: 'com.android.application'
apply plugin: 'com.yocn.plugin'

android {
    compileSdk 34
    defaultConfig {
        applicationId "com.yocn.learngradle_7"
        minSdkVersion 25
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    packagingOptions {
        resources.excludes.add("META-INF/*")
    }

    println "System.getProperty('system'):" + System.getProperty('system')
    getGradle().addListener(new TaskExecutionListener() {
        @Override
        void beforeExecute(Task task) {
            println "beforeExecute:" + task
        }

        @Override
        void afterExecute(Task task, TaskState state) {
            println "afterExecute:" + task
        }
    })
    getGradle().addBuildListener(new BuildListener() {
        @Override
        Object invokeMethod(String name, Object args) {
            println("invokeMethod   " + name + "->" + args)
            return super.invokeMethod(name, args)
        }

        @Override
        void settingsEvaluated(Settings settings) {
            println("settingsEvaluated")
        }

        @Override
        void projectsLoaded(Gradle gradle) {
            println("projectsLoaded")
        }

        @Override
        void projectsEvaluated(Gradle gradle) {
            println("projectsEvaluated")
        }

        @Override
        void buildFinished(BuildResult result) {
            println("buildFinish::" + result)
        }
    })
}

dependencies {
    println("" + this)
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation 'jp.wasabeef:glide-transformations:4.1.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
//    implementation "com.android.tools.build:gradle:${rootProject.ext.gradle_build_tool_version}"
}

//println("->"+configurations.name)
configurations.all {
//    println(resolutionStrategy)
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
//        println(requested.group + "  " + requested.name + " " + requested.version)
        if (requested.group == 'com.squareup.okhttp3' && requested.name == 'okhttp') {
            details.useVersion '4.10.0'
        }
    }
}

//tasks.register("MyTask", MyTask)
//
//class MyTask extends DefaultTask {
//    @TaskAction
//    def doAction() {
//        println("-----MyTask-> doAction" + this)
//    }
//}

interface CustomPluginExtension {
    Property<String> getVersion()

    Property<String> getTitle()
}

class CustomPlugin implements Plugin<Project> {

    @Override
    void apply(Project target) {
        println("-----插件CustomPlugin apply->" + target.class.name)
        def extension = target.extensions.create("custom", CustomPluginExtension)
        extension.title.convention("default extension title.")
        extension.version.convention("default extension version.")
        target.tasks.register("customTask", {
            println("-----Task in plugin Task title->${extension.title.get()} version->${extension.version.get()}")
            doLast {
                println("-----doLast Task in plugin Task title->${extension.title.get()} version->${extension.version.get()}")
            }
        })
    }
}

//apply plugin: CustomPlugin

//custom {
//    title = "custom title"
//    version = "version 1.0-00"
//}